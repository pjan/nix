" Environment {
    set nocompatible
" }

" General settings {
    filetype plugin indent on         " automatically detect file types
    syntax on                         " syntax highlighting
    set mouse=a                       " automatically enable mouse usage
    set mousehide                     " hide mouse cursor when typing

    set encoding=utf-8
    scriptencoding utf-8
    set termencoding=utf-8

    " Better unix compatibility
    set viewoptions=folds,options,cursor,unix,slash

    set shortmess+=filmnrxoOtT        " message abbreviation
    set virtualedit=onemore           " cursor can go one beyond last char
    set history=1000                  " store a lot of history

    set clipboard=unnamedplus         " share clipboard with the OS

    " Backup and undo
    set backup                        " backups are nice ...
    if has('persistent_undo')
      set undofile                    " so is persistent_undo
      set undolevels=1000             " max changes that can be undone
      set undoreload=10000            " max lines to save for undo on reload
    endif
    set hidden                        " allow buffer switching without saving

    " Modeline
    set modeline                      " last lines in document sets vim mode
    set modelines=3                   " number of lines checked for modelines

    if has("autocmd")
      au bufwinleave * silent! mkview   " make vim save view(state) (folds, cursor, etc)
      au bufwinenter * silent! loadview " make vim load view(state) (folds, cursor, etc)

      " switch to the current file directory
      au bufenter * if bufname("") !~ "^\[a-za-z0-9\]*://" | lcd %:p:h | endif

      " instead of reverting the cursor to the last position in the buffer, we
      " set it to the first line when editing a git commit message
      au filetype gitcommit au! bufenter commit_editmsg call setpos('.', [0, 1, 1, 0])

      " restore cursor position
      au bufreadpost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
    endif
" }

" ui {
    " font {
        set guifont=menlo\ for\ powerline
    "
    " colorscheme {
        set background=dark                 " set a default dark background
        let g:solarized_contrast="high"
        let g:solarized_visibility="high"
        color solarized                     " load colorscheme
    " }

    " general ui settings {
        set tabpagemax=15                   " only show 15 tabs
        set showmode                        " display the current mode
        set title                           " show the filename in the window titlebar;;
        set cursorline                      " highlight current line
        highlight clear signcolumn          " signcolumn should match background
        highlight clear linenr              " current line number row will have same background color in relative mode
        set visualbell t_vb=                " turn off error beep/flash
        set novisualbell                    " turn off visual bell
        set ttyfast                         " smoother changes
        set guicursor=n-v-c:block-cursor    " cursor shape (insert => vertical line)

        if has('cmdline_info')
            set ruler                 " show the cursor position all the time
            set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%v\ %p%)
            set showcmd               " display incomplete commands
        endif

        if has('statusline')
            set laststatus=2

            " broken down into easily includeable segments
            set statusline=%<%f\                        " filename
            set statusline+=%w%h%m%r                    " options
            set statusline+=%{fugitive#statusline()}    " git
            set statusline+=\ [%{&ff}/%y]               " filetype
            set statusline+=\ [%{getcwd()}]             " current dir
            set statusline+=\ [a=\%03.3b/h=\%02.2b]     " ascii / hexadecimal value of char
            set statusline+=%=%-14.(%l,%c%v%)\ %p%%     " right aligned file nav info
        endif

        set backspace=2                     " make backspace like most other apps
        set linespace=0                     " no extra space between rows
        set showmatch                       " show matching brackets/parens
        set number                          " show line numbers
        set incsearch                       " do incremental searching
        set hlsearch                        " highligh searches
        set ignorecase                      " ignore case when searching
        set smartcase                       " ... but not when uppercase is used
        set wildignore+=*\\tmp\\*,*.swp,*.swo,*.zip,.git,.cabal-sandbox
        set wildmenu                        " show list instead of just completing
        set wildmode=list:longest,full      " command <tab> completion, list matches, then longest common part, then all.
        set whichwrap=b,s,h,l,<,>,[,]       " move freely between files
        set scrolljump=5                    " lines to scroll when cursor leaves screen
        set scrolloff=3                     " keep 3 lines when scrolling
        " set foldenable                      " auto fold code
        set list
        set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " highlight problematic whitespace
        set splitright                      " put new vsplit windows to the right of the current
        set splitbelow                      " put new split windows to the bottom of the current
    " }
"}

" Formatting {
    set nowrap                        " don't wrap long lines
    set autoindent                    " indent at the same level of the previous line
    set tabstop=2                     " numbers of spaces of tab character
    set shiftwidth=2                  " numbers of spaces to (auto)indent
    set expandtab                     " tabs are converted to spaces, use only when required
    set softtabstop=2                 " let backspace delete indent
    set pastetoggle=<F12>             " pastetoggle (sane indentation on pastes)

    if has("autocmd")
        au BufWritePre <buffer> call StripTrailingWhitespace()
        au FileType haskell setlocal commentstring=--\ %s
    endif
" }

" ctags {
    set tags+=tags;$HOME,build/tags;$HOME        " look for the tags file in directory of current file, its parent(s) up to $HOME, if not found, do the same for build/tags file
" }

" key (re)mapping {
    " map leader & localleader
    nnoremap <space> <nop>
    let mapleader = ' '
    let maplocalleader = '  '

    " easier moving in tabs and windows
    map <c-j> <c-w>j<c-w>_
    map <c-k> <c-w>k<c-w>_
    map <c-l> <c-w>l<c-w>_
    map <c-h> <c-w>h<c-w>_

    " move between tabs (next an previous)
    map <s-h> gt
    map <s-l> gt

    " move between buffers like tabs
    nmap <silent> ;l :bn<cr>
    nmap <silent> ;h :bp<cr>
    nmap <silent> ;d :b#<bar>bd#<CR>

    " yank from the cursor to the end of the line, to be consistent with c and d.
    nnoremap y y$

    " code folding options
    nmap <silent> <leader>f0 :set foldlevel=0<cr>
    nmap <silent> <leader>f1 :set foldlevel=1<cr>
    nmap <silent> <leader>f2 :set foldlevel=2<cr>
    nmap <silent> <leader>f3 :set foldlevel=3<cr>
    nmap <silent> <leader>f4 :set foldlevel=4<cr>
    nmap <silent> <leader>f5 :set foldlevel=5<cr>
    nmap <silent> <leader>f6 :set foldlevel=6<cr>
    nmap <silent> <leader>f7 :set foldlevel=7<cr>
    nmap <silent> <leader>f8 :set foldlevel=8<cr>
    nmap <silent> <leader>f9 :set foldlevel=9<cr>

    " find merge conflict markers
    map <leader>fc /\v^[<\|=>]{7}( .*\|$)<cr>

    " visual shifting (does not exit visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " for when you forget to sudo.. really write the file.
    cmap w!! w !sudo tee % >/dev/null

    " helpers to edit mode
    cnoremap %% <c-r>=expand('%:h').'/'<cr>
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%
    map <leader>et :tabe %%

    " map <leader>ff to display all lines with keyword under cursor and ask which one to jump to
    nmap <leader>ff [i:let nr = input("which one: ")<bar>exe "normal " . nr ."[\t"<cr>

    " fix home and end keybindings for screen, particularly on mac
    " - for some reason this fixes the arrow keys too. huh.
    map [f $
    imap [f $
    map [h g0
    imap [h g0
" }

" plugins settings {
    " airline {
        let g:airline#extensions#ale#enabled = 1
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#show_splits = 1
        let g:airline_powerline_fonts = 1
    " }

    " ale {
        let g:ale_sign_column_always = 1
        let g:ale_linters = {
            \ 'haskell': ['ghc-mod', 'hlint'],
            \ }
        let g:ale_fixers = {
            \ 'haskell': ['brittany'],
            \ }
    " }

    " Fugitive {
        let g:signify_sign_show_count = 1
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
        nnoremap <silent> <leader>gr :Gread<CR>
        nnoremap <silent> <leader>gw :Gwrite<CR>
        nnoremap <silent> <leader>ge :Gedit<CR>
        nnoremap <silent> <leader>gi :Git add -p %<CR>
        nnoremap <silent> <leader>gg :SignifyToggle<CR>
    " }

    " fzf {
        nnoremap <silent> <expr> <Leader>ff (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : "").":Files\<cr>"
        nnoremap <silent>        <Leader>fb :Buffers<CR>       " open buffers
        nnoremap <silent>        <Leader>fg :GFiles<CR>        " git files
        nnoremap <silent>        <Leader>fp :Ag<CR>            " pattern (ag search)
        nnoremap <silent>        <Leader>ft :Tags<CR>          " tags
        nnoremap <silent>        <Leader>fm :Marks<CR>         " marks
        nnoremap <silent>        <Leader>fh :History<CR>       " oldfiles and open buffers
        nnoremap <silent>        <Leader>fc :Commits<CR>       " git commits
        nnoremap <silent>        <Leader>fs :Snippets<CR>      " Snippets from UltiSnips
    " }

    " gitgutter {
        let g:gitgutter_map_keys = 0
        let g:gitgutter_realtime = 1
        let g:gitgutter_eager = 1
        let g:gitgutter_diff_args = '--ignore-space-at-eol'

        nnoremap <silent> <Leader>hs :GitGutterStageHunk<CR>
        nnoremap <silent> <Leader>hu :GitGutterUndoHunk<CR>
        nnoremap <silent> <Leader>hx :GitGutterPreviewHunk<CR>
        nnoremap <silent> <Leader>hp :GitGutterPrevHunk<CR>
        nnoremap <silent> <Leader>hn :GitGutterNextHunk<CR>
    "}

    " haskell-vim {
          """ Haskell syntax highlighting settings
          let g:haskell_enable_quantification     = 1            " enable highlighting of forall
          " let g:haskell_enable_recursivedo      = 1            " enable highlighting of mdo and rec
          " let g:haskell_enable_arrowsyntax      = 1            " enable highlighting of proc
          " let g:haskell_enable_pattern_synonyms = 1            " enable highlighting of pattern
          " let g:haskell_enable_typeroles        = 1            " enable highlighting of type roles
          " let g:haskell_enable_static_pointers  = 1            " enable highlighting of static

          """ Haskell indentation settings
          let g:haskell_indent_after_bare_where   = 2            " indentation after a bare where clause
          let g:haskell_indent_case               = 2            " indentation of cases in case statement.
          let g:haskell_indent_do                 = 3            " indentation of things in do statement.
          let g:haskell_indent_if                 = 3            " indentation of 'then' and 'else' in if statements.
          let g:haskell_indent_in                 = 0            " indentation of 'in' statement.
          let g:haskell_indent_let                = 4            " indentation of additional lines in let statement.
          let g:haskell_indent_where              = 6            " indentation of clauses in where statement.
          let g:cabal_indent_section              = 2            " indentation of sections in cabal file
    " }

    " NerdTree {
        map <silent> <C-e>     :NERDTreeTabsToggle<CR>
        map <silent> <leader>e :NERDTreeFind<CR>

        let NERDTreeIgnore                      = ['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
        let NERDTreeShowBookmarks               = 0
        let NERDTreeChDirMode                   = 0
        let NERDTreeQuitOnOpen                  = 0
        let NERDTreeMouseMode                   = 2
        let NERDTreeShowHidden                  = 1
        let NERDTreeKeepTreeInNewTab            = 1
        let g:NERDShutUp                        = 1
        let g:nerdtree_tabs_open_on_gui_startup = 0
    "}

    " neco-ghc {
        " let g:haskellmode_completion_ghc = 0
        " let g:necoghc_enable_detailed_browse = 1

        " autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
    " }

    " deoplete {
        " Disable AutoComplPop.
        let g:acp_enableAtStartup = 0
        " Use deoplete
        let g:deoplete#enable_at_startup = 1
        " Use smartcase.
        " let g:deoplete#enable_smart_case = 1

        " <CR>: close popup and save indent.
        inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
        function! s:my_cr_function()
          return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
        endfunction
        " <C-h>, <BS>: close popup and delete backward char.
        inoremap <expr> <C-h> deoplete#smart_close_popup()."\<C-h>"
        inoremap <expr> <BS>  deoplete#smart_close_popup()."\<C-h>"
    " }

    " LanguageClient {
        if executable('hie')
            let g:LanguageClient_serverCommands = {
            \ 'haskell': ['hie', '--lsp'],
            \ }
        endif
    " }

    " neosnippet {
        let g:neosnippet#snippets_directory = '/run/current-system/etc/vim/snippets'
        let g:neosnippet#enable_snipmate_compatibility = 1
    " }

    " neosnippet / deoplete {
        imap <silent> <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
        imap <silent> <expr><S-TAB> neosnippet#expandable_or_jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
        if has('conceal')
          set conceallevel=2 concealcursor=i
        endif
    " }

    " UndoTree {
        nnoremap <silent> <Leader>u :UndotreeToggle<CR>

        let g:undotree_SetFocusWhenToggle = 1
    " }

    " Tabular {
        let g:haskell_tabular = 1

        vmap <silent> a= :Tabularize /=<CR>
        vmap <silent> ad :Tabularize /::<CR>
        vmap <silent> a- :Tabularize /-><CR>
        vmap <silent> a: :Tabularize /:<CR>
    " }

    " Tagbar {
        nnoremap <silent> <Leader>t :TagbarToggle<CR>

        """ Tagbar configuration for haskell, if lushtags is on $PATH
        if executable('lushtags')
            let g:tagbar_type_haskell = {
                \ 'ctagsbin' : 'lushtags',
                \ 'ctagsargs' : '--ignore-parse-error --',
                \ 'kinds' : [
                    \ 'm:module:0',
                    \ 'e:exports:1',
                    \ 'i:imports:1',
                    \ 't:declarations:0',
                    \ 'd:declarations:1',
                    \ 'n:declarations:1',
                    \ 'f:functions:0',
                    \ 'c:constructors:0'
                \ ],
                \ 'sro' : '.',
                \ 'kind2scope' : {
                    \ 'd' : 'data',
                    \ 'n' : 'newtype',
                    \ 'c' : 'constructor',
                    \ 't' : 'type'
                \ },
                \ 'scope2kind' : {
                    \ 'data' : 'd',
                    \ 'newtype' : 'n',
                    \ 'constructor' : 'c',
                    \ 'type' : 't'
                \ }
            \ }
        endif

        """ Tagbar configuration for scala
        let g:tagbar_type_scala = {
            \ 'ctagstype' : 'Scala',
            \ 'kinds'     : [
                \ 'p:packages:1',
                \ 'V:values',
                \ 'v:variables',
                \ 'T:types',
                \ 't:traits',
                \ 'o:objects',
                \ 'a:aclasses',
                \ 'c:classes',
                \ 'r:cclasses',
                \ 'm:methods'
            \ ]
        \ }
    " }

    " " vim-rooter {
    "     let g:rooter_silent_chdir = 1
    "     augroup vimrc_rooter
    "         autocmd VimEnter * :Rooter
    "     augroup end
    " " }
" }

" Highlighting {
    " if you simply define highlight here, it interacts with colorschemes,
    " so using an autocmd to solve this
    function! UpdateHighlights()
        """ autocompletion
        highlight Pmenu           ctermbg=245    ctermfg=black
        highlight PmenuSel        ctermbg=254    ctermfg=234
        highlight PmenuSBar       ctermbg=black  ctermfg=black
        highlight PmenuThumb      ctermbg=234    ctermfg=234

        """ Tagbar colors
        highlight TagbarSignature ctermbg=NONE  ctermfg=64
        highlight TagbarType                    ctermfg=136
        highlight TagbarKind                    ctermfg=33
        highlight TagbarHighlight ctermbg=NONE
        highlight TagbarScope                   ctermfg=136
    endfunction

    augroup UpdateHighlights
        autocmd!
        autocmd VimEnter * call UpdateHighlights()
        autocmd ColorScheme * call UpdateHighlights()
    augroup end
" }

" Functions and Commands {

    " Initialize directories {
        function! InitializeDirectories()
            let parent = $HOME
            let dir_list = {
                        \ 'backup': 'backupdir',
                        \ 'views': 'viewdir',
                        \ 'swap': 'directory' }

            if has('persistent_undo')
                let dir_list['undo'] = 'undodir'
            endif

            let common_dir = parent . '/.local/share/vim/'

            if exists("*mkdir")
              if !isdirectory(common_dir)
                call mkdir(common_dir)
              endif
            endif

            for [dirname, settingname] in items(dir_list)
                let directory = common_dir . dirname . '/'
                if exists("*mkdir")
                    if !isdirectory(directory)
                        call mkdir(directory)
                    endif
                endif
                if !isdirectory(directory)
                    echo "Warning: Unable to create backup directory: " . directory
                    echo "Try: mkdir -p " . directory
                else
                    let directory = substitute(directory, " ", "\\\\ ", "g")
                    exec "set " . settingname . "=" . directory
                endif
            endfor
        endfunction
    " }

    " Strip whitespace {
        function! StripTrailingWhitespace()
            " Preparation: save last search, and cursor position.
            let _s=@/
            let l = line(".")
            let c = col(".")
            " do the business:
            %s/\s\+$//e
            " clean up: restore previous search history, and cursor position
            let @/=_s
            call cursor(l, c)
        endfunction

        command! -nargs=0
              \ StripTrailingWhitespace call StripTrailingWhitespace()
        cabbrev strip StripTrailingWhitespace
    " }

    " RelativeFilesComplete {
        " completion function for file names relative to the current file being edited
        function! RelativeFilesComplete(ArgLead, CmdLine, CursorPos)
            let file_basename = expand("%:p:h")
            let path = file_basename . "/" . a:ArgLead

            if isdirectory(path) && path[len(path) - 1] != "/"
                let path = path . "/"
            endif

            let relativefiles = split(glob(path . "*"), "\n")

            let index = 0
            while index < len(relativefiles)
                if isdirectory(relativefiles[index])
                    let relativefiles[index] .= "/"
                endif
                let relativefiles[index] = substitute(relativefiles[index], file_basename . "/" , "", "")
                let index += 1
            endwhile

            return relativefiles
        endfunction
    " }
" }

call InitializeDirectories()